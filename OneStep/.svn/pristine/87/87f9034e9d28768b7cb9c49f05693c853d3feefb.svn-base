package kr.or.ddit.controller;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import kr.or.ddit.service.ICompanyService;
import kr.or.ddit.service.IPayService;
import kr.or.ddit.vo.AnnoVO;
import kr.or.ddit.vo.PayVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j // lombok 추가 후 사용 가능 // SLF4J(Simple Logging Facade for Java)는 이름에서 확인할 수 있듯이. java.util.logging, logback 및 log4j와 같은 다양한 로깅 프레임 워크에 대한 추상화(인터페이스) 역할을 하는 라이브러리
@Controller
@RequestMapping("/company")
public class companyController { 
	
	@Inject
	private IPayService service;
	
	
	@Inject
	private ICompanyService comService;

	@RequestMapping(value="/main", method = RequestMethod.GET)
	public String listGet() {
		log.info("HTTP 메서드 매핑");
		log.info("listGet()");
		return "company/main";
	}
	
	@GetMapping("/insertForm")
	public String insertForm() {
		return "company/insertAnno";
	}
	
	@RequestMapping(value = "/insert",method = RequestMethod.POST )
	public String insert(Model model,@Validated AnnoVO anno) {
		System.out.println(anno);
		comService.insert(anno);
		return "company/main";
	}
	@GetMapping(value = "/myAnno")
	public String myAnno() {
		return "company/myAnno";
	}
	@GetMapping(value = "/detail")
	public String detail() {
		return "company/detailAnno";
	}
	@GetMapping(value = "/cal")
	public String cal() {
		return "company/cal";
	}
	@GetMapping(value = "/annoMem")
	public String annoMem() {
		return "company/annoMem";
	}
	@GetMapping(value = "/mem")
	public String mem() {
		return "company/memSearch";
	}
	@GetMapping(value = "/heart")
	public String heart() {
		return "company/memHeart";
	}
	@GetMapping(value = "/payCard")
	public String payCard() {
		return "company/payCard";
	}
	@GetMapping(value = "/pay")
	public String pay() {
		return "company/pay";
	}
	@RequestMapping(value = "/payss", method = RequestMethod.POST)
	public String crudRegisterForm(PayVO pay, Model model) {
		log.info("crudRegisterForm()");
		System.out.println(pay);
		service.insert(pay);
		return "redirect:/company/pay";
	}
	
	@GetMapping(value = "/notice")
	public String notice() {
		return "company/notice";
	}
	
	
	
}
