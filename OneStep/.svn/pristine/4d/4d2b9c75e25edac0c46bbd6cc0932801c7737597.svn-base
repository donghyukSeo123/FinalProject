package kr.or.ddit.service.impl;

import java.io.File;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;

import jdk.internal.org.objectweb.asm.tree.TryCatchBlockNode;
import kr.or.ddit.ServiceResult;
import kr.or.ddit.mapper.BoardMapper;
import kr.or.ddit.service.IBoardService;
import kr.or.ddit.vo.AttVO;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.PaginationInfoVO;

@Service
public class BoardServiceImpl implements IBoardService{

	@Inject
	private BoardMapper mapper;

	@Override
	public int selectBoardCount(PaginationInfoVO<BoardVO> pagingVO) {
		return mapper.selectBoardCount(pagingVO);
	}

	@Override
	public List<BoardVO> selectBoardList(PaginationInfoVO<BoardVO> pagingVO) {
		return mapper.selectBoardList(pagingVO);
	}

	@Override
	public ServiceResult insertBoard(HttpServletRequest req, BoardVO boardVO) {
		ServiceResult result = null;
		int status = mapper.insertBoard(boardVO);
		if(status>0) {
			List<AttVO> boardFileList = boardVO.getBoardFileList();
				processBoardFile(boardFileList, boardVO.getBoardId(), req);
				
				result = ServiceResult.OK;
			
		}else {
			result = ServiceResult.FAILED;
		}
		return result;
	}

	private void processBoardFile(
			List<AttVO> boardFileList,
			int boardId,
			HttpServletRequest req) {
		if(boardFileList !=null && boardFileList.size()>0) {
			for(AttVO boardFileVO : boardFileList) {
				String saveName = UUID.randomUUID().toString();
			}
		}
	}

	@Override
	public BoardVO selectBoard(int boardId) {
		mapper.incrementHit(boardId);
		return mapper.selectBoard(boardId);
	}

	@Override
	public ServiceResult updateBoard(HttpServletRequest req, BoardVO boardVO) {
		ServiceResult result = null;
		int cnt = mapper.updateBoard(boardVO);
		if(cnt >0) {
			List<AttVO> boardFileList = boardVO.getBoardFileList();
			try {
				processBoardFile(boardFileList, boardVO.getBoardId(), req);
				Integer[] delBoardId = boardVO.getDelBoardId();
				if(delBoardId !=null) {
					for(int i=0; i<delBoardId.length; i++) {
						AttVO boardFileVo = mapper.selectBoardFile(delBoardId[i]);
						mapper.deleteBoardFile(delBoardId[i]);
						File file = new File(boardFileVo.getAttPath());
						file.delete();
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			result = ServiceResult.OK;
		}else {
			result = ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public ServiceResult deleteBoard(HttpServletRequest req, int boardId) {
		ServiceResult result = null;
		BoardVO boardVO = mapper.selectBoard(boardId);
		mapper.deleteBoardFileByBoardId(boardId);
		int cnt = mapper.deleteBoard(boardId);
		if(cnt>0) {
			List<AttVO> boardFileList = boardVO.getBoardFileList();
			try {
				if(boardFileList !=null) {
					String[] filePath = boardFileList.get(0).getAttPath().split("/");
					int cutNum = boardFileList.get(0).getAttPath().lastIndexOf(filePath[filePath.length-1]);
					String path = boardFileList.get(0).getAttPath().substring(0,cutNum);
					deleteFolder(req,path);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			result = ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	private void deleteFolder(HttpServletRequest req, String path) {
		File folder = new File(path);
		try {
			if(folder.exists()) {
				File[] folderList = folder.listFiles();
				
				for(int i=0; i<folderList.length; i++) {
					if(folderList[i].isFile()) {
						folderList[i].delete();
					}else {
						deleteFolder(req,folderList[i].getPath());
					}
				}
				folder.delete(); //폴더 삭제
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

}
































