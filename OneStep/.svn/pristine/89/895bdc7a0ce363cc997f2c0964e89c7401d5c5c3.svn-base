package kr.or.ddit.controller.board;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.service.IBoardService;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.PaginationInfoVO;
import lombok.extern.slf4j.Slf4j;
import oracle.net.ano.Service;

@Slf4j
@Controller
@RequestMapping("/board")
public class BoardController {
	
	@Inject
	private IBoardService boardService;
	
	
	@RequestMapping(value="/list", method=RequestMethod.GET)
	public String boardList(
			@RequestParam(name="page", required=false, defaultValue = "1") int currentPage,
			@RequestParam(required=false, defaultValue = "title") String searchType,
			@RequestParam(required=false) String searchWord,
			Model model) {
		
		PaginationInfoVO<BoardVO> pagingVO = new PaginationInfoVO<BoardVO>();
		
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchWord", searchWord);
			model.addAttribute("searchWord", searchType);
		}
		
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = boardService.selectBoardCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		List<BoardVO> boardList = boardService.selectBoardList(pagingVO);
		pagingVO.setDataList(boardList);
		
		model.addAttribute("pagingVO",pagingVO);
		log.info("나오냐?" + model);
		return "board/list";
	}
	
	@RequestMapping(value="/form", method=RequestMethod.GET)
	public String boardForm() {
		return "board/register";
		
	}

	
	@RequestMapping(value="/insert", method= RequestMethod.POST)
	public String boardInsert(
			HttpServletRequest req,
			BoardVO boardVO, Model model){
		String goPage = "";
		HttpSession session = req.getSession();
		MemberVO memberVO = (MemberVO) session.getAttribute("memberVO");
		System.out.println(("넒어와지나? memberVO : " + memberVO));
		log.info("session : " + session);
		if(memberVO!=null) {
			boardVO.setMemId(memberVO.getMemId());
			ServiceResult result = boardService.insertBoard(req, boardVO);
			if(result.equals(ServiceResult.OK)) {
				goPage="redirect:/board/list";
			}else {
				goPage = "board/register";
			}
			
		}else {
			goPage = "redirect:/member/login";
		}
		
		return goPage;
	}

	
	
	@RequestMapping(value="/read",method=RequestMethod.GET)
	public String boardDetail(int boardId, Model model) {
		BoardVO boardVO = boardService.selectBoard(boardId);
		model.addAttribute("board", boardVO);
		return "board/read";
	}
	
	
	@RequestMapping(value="/update", method=RequestMethod.GET)
	public String boardUpdate(int boardId, Model model) {
		BoardVO boardVO = boardService.selectBoard(boardId);
		model.addAttribute("boardVO",boardVO);
		model.addAttribute("status","u");
		
		return "board/register";
	}
	
	
	@RequestMapping(value="/update.do",method=RequestMethod.POST)
	public String boardUpdatDO(
			HttpServletRequest req,
			BoardVO boardVO, Model model) {
		String goPage = "";
		ServiceResult result = boardService.updateBoard(req, boardVO);
		if(result.equals(ServiceResult.OK)) {
			goPage = "redirect:/board/read?boardId="+boardVO.getBoardId();
		}else {
			model.addAttribute("message", "수정에 실패했습니다.");
			model.addAttribute("boardVO", boardVO);
			model.addAttribute("status","u");
			goPage="board/register";
		}
		return goPage;
	}
	
	@RequestMapping(value="/delete",method=RequestMethod.POST)
	public String boardDelete(
			HttpServletRequest req,
			int boardId, Model model) {
		String goPage ="";
		ServiceResult result = boardService.deleteBoard(req,boardId);
		if(result.equals(ServiceResult.OK)) {
			goPage = "redirect:/board/list";
		}else {
			goPage = "redirect:/board/read?boardId="+boardId;
		}
		return goPage;
		
	}
	
	

}


























































































































