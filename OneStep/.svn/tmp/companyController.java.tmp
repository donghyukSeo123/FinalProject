package kr.or.ddit.controller;


import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.service.ICompanyService;
import kr.or.ddit.service.IPayService;
import kr.or.ddit.vo.AnnoKeywordVO;
import kr.or.ddit.vo.AnnoVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.CompanyVO;
import kr.or.ddit.vo.PayVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j // lombok 추가 후 사용 가능 // SLF4J(Simple Logging Facade for Java)는 이름에서 확인할 수 있듯이. java.util.logging, logback 및 log4j와 같은 다양한 로깅 프레임 워크에 대한 추상화(인터페이스) 역할을 하는 라이브러리
@Controller
@RequestMapping("/company")
public class companyController { 
	
	@Inject
	private IPayService service;
	
	
	@Inject
	private ICompanyService comService;

	@RequestMapping(value="/main", method = RequestMethod.GET)
	public String listGet() {
		log.info("HTTP 메서드 매핑");
		log.info("listGet()");
		return "company/main";
	}
	
	@GetMapping("/insertForm")
	public String insertForm(Model model) {
		return "company/insertAnno";
	}
	
	@PostMapping(value = "/insert")
	public String insert(Model model,AnnoVO anno,HttpServletRequest req)throws Exception {
	    log.info("anno {}", anno);
		
		comService.insertAnno(req,anno);
		
		return "company/main";
	}
	@GetMapping(value = "/myAnno")
	public String myAnno(Model model) {
		int comId=1;
		List<AnnoVO> annoList =comService.selectAnno(comId);
		System.out.println("annoList"+annoList);
		model.addAttribute("annoList",annoList);
		return "company/myAnno";
	}
	@GetMapping(value = "/detail")
	public String detail(int annoId, Model model) {
		System.out.println("annoId"+annoId);
		AnnoVO annoVO = comService.selectAnnoOne(annoId);
		model.addAttribute(annoVO);
		return "company/detailAnno";
	}
	@GetMapping(value = "/cal")
	public String cal() {
		return "company/cal";
	}
	@GetMapping(value = "/annoMem")
	public String annoMem() {
		return "company/annoMem";
	}
	@GetMapping(value = "/mem")
	public String mem(Model model) {
		List<MemberVO> member = comService.selectMember(); 
		model.addAttribute("member",member);
		return "company/memSearch";
	}
	@GetMapping(value = "/heart")
	public String heart(Model model) {
		int comId= 1;
		List<MemberVO> member = comService.selectinterMember(comId);
		model.addAttribute("member",member);
		return "company/memHeart";
	}
	@GetMapping(value = "/payCard")
	public String payCard() {
		return "company/payCard";
	}
	@GetMapping(value = "/pay")
	public String pay() {
		return "company/pay";
	}
	@RequestMapping(value = "/payss", method = RequestMethod.POST)
	public String pay(PayVO pay, Model model) {
		log.info("crudRegisterForm()");
		System.out.println(pay);
		service.insert(pay);
		return "redirect:/company/pay";
	}
	
	@GetMapping(value = "/notice")
	public String notice() {
		return "company/notice";
	}
	
	@RequestMapping(value = "/delete" ,method = RequestMethod.POST )
	public String delete(int annoId, Model model) {
		System.out.println("annoId"+annoId);
		String gopage = "";
		ServiceResult result = comService.deleteAnno(annoId);
		if(result.equals(ServiceResult.OK)) {
			gopage = "redirect:/company/myAnno";
		}
		return gopage;
	}
	@RequestMapping(value = "/update" ,method = RequestMethod.GET )
	public String updateForm(int annoId, Model model) {
		AnnoVO annoVO = comService.selectAnnoOne(annoId);
		model.addAttribute("annoVO",annoVO);
		return "company/updateAnno";
	}
	@RequestMapping(value = "/update" ,method = RequestMethod.POST )
	public String update(AnnoVO annoVO, Model model) {
		System.out.println("annoId"+annoVO.getAnnoId());
		String gopage = "";
		ServiceResult result = comService.updateAnno(annoVO);
		if(result.equals(ServiceResult.OK)) {
			gopage = "redirect:/company/myAnno";
		}
		return gopage;
	}
	
	//기업정보등록
	@GetMapping("/insertInfo")
	public String companyInsert() {
		return "company/comInsert";
	}
	
	@PostMapping("/insertInfo")
	public String companyInsertGo(CompanyVO vo,HttpServletRequest req) throws Exception {
		System.out.println(vo);
		comService.insertCompany(vo,req);
		return "success";
	}
	
	@RequestMapping(value = "/detail/{companyId}",method = RequestMethod.GET)
	public String companyDetail(@PathVariable("companyId") String companyId,Model model) {
		
		CompanyVO vo = comService.getCompany(companyId);
		List<AnnoVO> annoVo = comService.selectAnno(Integer.parseInt(companyId));
		System.out.println("회사정보 :" +vo);
		model.addAttribute("companyVO", vo);
		model.addAttribute("annoVO", annoVo);
		return "company/detail";
	}
	
	
	
}
